// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/usecase/interface/user.go

// Package mockusecase is a generated GoMock package.
package mockusecase

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/nadeem1815/premium-watch/pkg/domain"
	model "github.com/nadeem1815/premium-watch/pkg/utils/model"
)

// MockUserUseCase is a mock of UserUseCase interface.
type MockUserUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockUserUseCaseMockRecorder
}

// MockUserUseCaseMockRecorder is the mock recorder for MockUserUseCase.
type MockUserUseCaseMockRecorder struct {
	mock *MockUserUseCase
}

// NewMockUserUseCase creates a new mock instance.
func NewMockUserUseCase(ctrl *gomock.Controller) *MockUserUseCase {
	mock := &MockUserUseCase{ctrl: ctrl}
	mock.recorder = &MockUserUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserUseCase) EXPECT() *MockUserUseCaseMockRecorder {
	return m.recorder
}

// AddAddress mocks base method.
func (m *MockUserUseCase) AddAddress(ctx context.Context, body model.AddressInput, userID string) (domain.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAddress", ctx, body, userID)
	ret0, _ := ret[0].(domain.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddAddress indicates an expected call of AddAddress.
func (mr *MockUserUseCaseMockRecorder) AddAddress(ctx, body, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAddress", reflect.TypeOf((*MockUserUseCase)(nil).AddAddress), ctx, body, userID)
}

// BlockUser mocks base method.
func (m *MockUserUseCase) BlockUser(ctx context.Context, user_id string) (domain.UserInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BlockUser", ctx, user_id)
	ret0, _ := ret[0].(domain.UserInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BlockUser indicates an expected call of BlockUser.
func (mr *MockUserUseCaseMockRecorder) BlockUser(ctx, user_id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlockUser", reflect.TypeOf((*MockUserUseCase)(nil).BlockUser), ctx, user_id)
}

// LoginWithEmail mocks base method.
func (m *MockUserUseCase) LoginWithEmail(ctx context.Context, input model.UserLoginEmail) (string, model.UserDataOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoginWithEmail", ctx, input)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(model.UserDataOutput)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// LoginWithEmail indicates an expected call of LoginWithEmail.
func (mr *MockUserUseCaseMockRecorder) LoginWithEmail(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginWithEmail", reflect.TypeOf((*MockUserUseCase)(nil).LoginWithEmail), ctx, input)
}

// UnBlockUser mocks base method.
func (m *MockUserUseCase) UnBlockUser(ctx context.Context, user_id string) (domain.UserInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnBlockUser", ctx, user_id)
	ret0, _ := ret[0].(domain.UserInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnBlockUser indicates an expected call of UnBlockUser.
func (mr *MockUserUseCaseMockRecorder) UnBlockUser(ctx, user_id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnBlockUser", reflect.TypeOf((*MockUserUseCase)(nil).UnBlockUser), ctx, user_id)
}

// UserRegister mocks base method.
func (m *MockUserUseCase) UserRegister(ctx context.Context, input model.UsarDataInput) (model.UserDataOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserRegister", ctx, input)
	ret0, _ := ret[0].(model.UserDataOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserRegister indicates an expected call of UserRegister.
func (mr *MockUserUseCaseMockRecorder) UserRegister(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserRegister", reflect.TypeOf((*MockUserUseCase)(nil).UserRegister), ctx, input)
}
